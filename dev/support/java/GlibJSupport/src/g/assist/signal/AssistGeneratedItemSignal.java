package g.assist.signal;

import g.FatalException;
import g.assist.AssistGeneratedItemAbstract;
import g.prog.CppMethod.Parameter;
import g.prog.CppMethod.ParameterSet;
import g.text.NotAValidTemplateStringFormat;
import g.text.TextTemplateBuilder;

/**
 * Encapsulates properties of a signal and generation function.
 * @author Bobby Gate
 */
public class AssistGeneratedItemSignal extends AssistGeneratedItemAbstract
{
	private String mName=null;
	private String mNameSpace="";
	private ParameterSet mParameterSet = new ParameterSet();

	/**
	 * Constructor.
	 * @param aName      Signal name.
	 * @param aNameSpace Namespace pattern '::' separated (i.e g::signal ).
	 */
	public AssistGeneratedItemSignal ( String aName , String aNameSpace )
	{		
		mName = aName;

		if(aNameSpace != null)
		{
			aNameSpace = aNameSpace.trim();			
			mNameSpace = (aNameSpace.length()==0)?null:aNameSpace;
		}
		else
		{
			mNameSpace = null;
		}
	}

	/**
	 * Gets the name of the file (.h) generated by the assist application,
	 * where file name is the full signal name (signal namespace + signal name) i.e.:
	 * 'g.signal.MySignal.h'
	 */
	@Override
	public String getGenerationItemName()
	{
		return (mNameSpace==null)?
			String.format("%s.h", getName()):
			String.format("%s.%s.h", getNameSpace().replaceAll("::", ".") , getName());
	}
	
	/**
	 * Gets the "_g_signal" the name of the subdirectory, where the generated file is placed to. 
	 * @see 
	 */
	@Override
	public String getGenerationDirName(){ return "_g_signal"; }
	
	/**
	 * Gets the signal name.
	 * @return
	 */
	public String getName()	{ return mName;	}


	/**
	 * Gets namespace (separated by '::')
	 * @return
	 */
	public String getNameSpace() { return mNameSpace; }

	/**
	 * 
	 * @return
	 */
	public String getFullName()
	{
		if ( mNameSpace != null)
		{
			return String.format("%s::%s", mNameSpace,mName);
		}
		else
		{
			return mName;
		}
	}

	/**
	 * Gets parameter set or null if it is empty.
	 * @return
	 */
	public ParameterSet getParameterSet()	{ return mParameterSet;	}
		
	/**
	 * Gets parameter set as an array. Used by TextBuilder for generating output file.
	 * @return
	 * @see g.text.TextTemplateBuilder 
	 */
	public Parameter[] getParams ( ) { return mParameterSet.toArray(); }
	
	/**
	 * Sets the parameter set of the signal. 
	 * @param aParameterSet
	 */
	public void setParameterSet(ParameterSet aParameterSet) 
	{
		if(aParameterSet==null)
		{
			mParameterSet = new ParameterSet();
		}
		else
		{
			mParameterSet = aParameterSet;
		}
	}

	/**
	 * Gets the interface consisting in signal full name plus parameter list i.e
	 * g::signals::MySignal(int a , int b )
	 * @return
	 */
	public String getInterface ()
	{
		return String.format("%s(%s)", getFullName(), mParameterSet.getBody());		
	}
	
	/**
	 * Used by builder for generating namespace preamble i.e.
	 * namespace g {
	 * namespace signal {
	 * @return
	 */
	public String getNspaceInit()
	{
		if (mNameSpace!=null)
		{
			String result = "";
			
			for (String nsp : mNameSpace.split("::"))
			{
				result += "namespace " + nsp + "\r\n{\r\n";
			}
			
			return result;
		}
		else
		{
			return "";
		}		
	}
	
	/**
	 * Used by builder for generating namespace ending i.e.
	 * }//namespace signal 
	 * }//namespace g 
	 * @return
	 */
	public String getNspaceEnding()
	{
		if (mNameSpace!=null)
		{
			String result = "";
			
			for (String nsp : mNameSpace.split("::"))
			{
				result = "} //namespace " + nsp + "\r\n" + result;
			}
			
			return result;
		}
		else
		{
			return "";
		}		
	}
		
	/**
	 * Returns the interface of the signal.
	 * @see g.assist.signal.AssistGeneratedItemSignal.getInterface  
	 */
	@Override
	public String toString() { return getInterface(); }
	

	/**
	 * 
	 */
	@Override
	public String buildItemBody()
	{
		try
		{
			TextTemplateBuilder text_template_builder = new TextTemplateBuilder(getClass());

			text_template_builder.setTemplateStream(getClass()
					.getResourceAsStream("SignalAssistTemplate.txt"));
			text_template_builder.setInterfaceInstance(this);

			return text_template_builder.getOutputExpression();

		} 
		catch (NotAValidTemplateStringFormat e)
		{
			new FatalException(e).doStandardAction();
			return null;//not reachable
		}
	}
	
}
